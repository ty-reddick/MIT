/* Hashing & Classes */

Hashing- how dictionaies are implemented in python. This leads to a vey efficient (most of the time)search but it comes at the cost of space (you trade space for time)
A list of list

example: {
	// what we are hashing is a set of integers
	# take an integer (i) and hash it ... hash(i)
	# converts an integer into a different integer in range
	hash(i) =  0->K
	
	code: {
		#Linear rehashing
		numBuckets = 47  #this is ugly.  We will see a better way soon

		def create():
		    global numBuckets
		    hSet = []
		    for i in range(numBuckets):
		        hSet.append([])
		    return hSet

		def hashElem(e):
		    global numBuckets
		    return e%numBuckets 

		def insert(hSet, i):
    		hSet[hashElem(i)].append(i)

    	def remove(hSet, i):
		    newBucket = []
		    for j in hSet[hashElem(i)]:
		        if j != i:
		            newBucket.append(j)
		    hSet[hashElem(i)] = newBucket

		def member(hSet, i):
		    return i in hSet[hashElem(i)]

		#The hash function is many-to-one. Many positive integers will hash to the same value
	}
}
Hashing Collision (research it)

example2: {
	numBuckets = 47
	def test1():
	    s = create()
	    for i in range(40):
	        insert(s, i)
	    insert(s, 325)
	    insert(s, 325)
	    insert(s, 987654321)
	    print s
	    print member(s, 325)
	    remove(s, 325)
	    print member(s, 325)
	    print member(s, 987654321)
}
A good hash function will widely disperse the values you hash so they end up in diffeent buckets.

We can look at something in constant time if you have enough buckets
Any kind of immutable object can be hashed(eveything in python is an object)

example3:{
	def hashElem(e):
	    global numBuckets
	    if type(e) == int:
	        val = e
	    if type(e) == str:
	        #Convert e to an int
	        val = 0
	        shift = 0
	        for c in e:
	            val = val + shift*ord(c)
	            shift += 1
	    return val%numBuckets

	def test2():
	    d = create()
	    strs = ['ab', 'ba', '32a',
	            'big dog', 'small bird']
	    for s in strs:
	        insert(d, s)
	    for i in range(40):
	        insert(d, i)
	    print d
	    print member(d, 'small bird')
	    print member(d, 'big bird')
	    remove(d, 'small bird')
	    print d
}
Its simple to hash any immutable object because objects ae just bits in a computer
You can do this in any pogamming language

/* Execeptions, Classes & Iterators */
exceptions ae everywhere in Python
Errors ae exceptions in Python

When the pogram crashes its called an Unhandled Exception
once the progam is debugged, unhandled exceptions should never happen
try except block: {
	# You can nest these. Its just for control
	try: {
		some code
		#if there is an error here then it stops and jumps to the except code
	}
	except: {
		some code
	}
}
example: {
	def readVal(valType, requestMsg, errorMsg):
	    numTries = 0
	    while numTries < 4:
	        val = raw_input(requestMsg)
	        try:
	            val = valType(val)
	            return val
	        except ValueError:
	            print(errorMsg)
	            numTries += 1
	    raise TypeError('Num tries exceeded')

	##print readVal(int, 'Enter int: ', 'Not an int.')

	##try:
	##    readVal(int, 'Enter int: ', 'Not an int.')
	##except TypeError, s:
	##    print s
}

ClASS
module - collection of elated function
example - import math -> math.log
.notation to tell the difference
(set.member) & (table.member) is not the same
this avoids conflcts
A class is a collection of data and functions, They are bound together so you can pass objects from one function to another
Object oriented pogramming
L.append(e) # Youre passing append(e) to L
The data and functions are the class attributes
Associate attributes with objects
* Class is an object (E)
message passing metaphor L.append(e) # Youre passing append(e) to L
* method is a function associated with an object C.area() -> area() is associated with C

list and dict are built in classes That was added to Python